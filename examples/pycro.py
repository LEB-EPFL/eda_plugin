import time
import numpy as np
from actuators.micro_manager import PycroAcquisition
import tifffile

class InjectedPycroAcquisition(PycroAcquisition):
    def __init__(self, *args, **kwargs):
        # Make a short series to start imaging with. Later events will be generated by the
        # EDA framework
        my_settings =  {'num_time_points': 10,
                        'time_interval_s': 1,
                        'channel_group': 'Channel',
                        'channels': ['FITC', 'DAPI'],
                        'order': 'tc'}
        super().__init__(*args, settings=my_settings, **kwargs)
        tif_file = "C:/Users/stepp/Documents/02_Raw/SmartMito/180420_120_comp.tif"
        self.frame_time = 0.15 # s
        self.tif = tifffile.imread(tif_file)
        self.start_time = time.perf_counter()
        self.timepoint = 0
        print(self.tif.shape)

    def receive_image(self, image, metadata):
        #Replace the image by one from the tif
        for idx, c in enumerate(self.channels):
            if metadata['Channel'] == c['config']:
                channel = idx

        if channel == 0:
            now = time.perf_counter()
            elapsed = now-self.start_time
            timepoint = round(elapsed/self.frame_time)
            timepoint = np.max([timepoint, self.timepoint+1])
            self.timepoint = np.mod(timepoint,self.tif.shape[0])

        image = self.tif[self.timepoint, channel, :, :]
        return super().receive_image(image, metadata)